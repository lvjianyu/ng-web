!function(t){"use strict";var e=["ui.router","ui.bootstrap","platform","authentication","ngWeb","ngMessage","angular-loading-bar","textAngular"],n=t.module("app",e);n.config(["cfpLoadingBarProvider",function(t){t.includeSpinner=!1}]),n.config(["$provide",function(t){t.decorator("$templateCache",["$http","$delegate","$injector",function(t,e,n){return e.loadedTemplateUrl=function(e){t({url:e,method:"GET"}).then(function(t){n.get("$compile")(t.data)})},e}])}]),n.run(["$templateCache","$http","$compile",function(t){t.loadedTemplateUrl("/template/ng-template.html")}])}(angular);
!function(i){"use strict";i.module("ngWeb",[]).value("topicItemSource",[{topic:"Javascript",liStyle:"bg_lg span3",uiSref:"javascript",iStyle:"icon-signal",spanStyle:"label label-success"},{topic:"Angularjs",liStyle:"bg_lb",uiSref:"angularjs",iStyle:"icon-dashboard",spanStyle:"label label-success"},{topic:"NodeJS",liStyle:"bg_ly span2",uiSref:"nodejs",iStyle:"icon-inbox",spanStyle:"label label-success"},{topic:"C#",liStyle:"bg_lo span3",uiSref:"csharp",iStyle:"icon-th",spanStyle:"label label-success"},{topic:"MongoDB",liStyle:"bg_ls",uiSref:"mongodb",iStyle:"icon-fullscreen",spanStyle:"label label-success"},{topic:"SQL",liStyle:"bg_lo",uiSref:"sql",iStyle:"icon-th-list",spanStyle:"label label-success"}]).run(["$templateCache",function(i){var a='<div style="height: 81px">   <div id="user-nav" class="navbar navbar-inverse">       <ul class="nav">           <li>               <a href>                   <i class="icon icon-user"></i>                   <span class="text">welcome</span>               </a>           </li>           <li>               <a href ng-click="login()">                   <i class="icon icon-key"></i>                   <span class="text">Login</span>               </a>           </li>       </ul>   </div></div>',e='<div class="row-fluid">   <div id="footer" class="span12">        2014-2015 &copy;Web design by        <a href="https://github.com/microlv/" target="_blank">[microlv]</a>       fork me on github:       <a href="https://github.com/microlv/" target="_blank">[microlv]</a>   </div></div>',l='<div id="sidebar">   <a class="visible-phone" href ui-sref="topic">       <i class="icon icon-home"></i> Dashboard   </a>   <ul>      <li data-ng-repeat="item in layoutSidebarItemSource">          <a data-ng-href="{{item.href}}">              <i class="icon" data-ng-class="item.iStyle"></i>              <span> {{item.topic}}</span>          </a>      </li>   </ul></div>',t='<div id="content">   <div id="content-header">       <div id="breadcrumb">           <a ui-sref="index" title="Go to Home" class="tip-bottom">           <i class="icon-home"></i>Home           </a>       </div>   </div>   <div ui-view></div></div>',s='<ul class="quick-actions">   <li data-ng-class="item.liStyle" data-ng-repeat="item in itemSource">      <a data-ng-href="{{item.href}}">          <i data-ng-class="item.iStyle"></i>          <span data-ng-show="item.number" class="label label-important">{{item.number}}</span>           {{item.topic}}      </a>   </li></ul>',c='<div id="search">   <a href data-ui-sref="about">       <span class="text">About Me</span>   </a>   <a href data-ui-sref="edit-article">       <span class="text">Post Article</span>   </a></div>';i.put("layout-header.html",a),i.put("layout-content.html",t),i.put("layout-footer.html",e),i.put("layout-sidebar.html",l),i.put("layout-search.html",c),i.put("topic-items.html",s)}])}(angular);
!function(t){"use strict";var e=t.module("platform",[]);e.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(t,e){e.otherwise("topic"),t.state("topic",{url:"/topic",templateUrl:"/templates/topic"}).state("article",{url:"/article/:id",templateUrl:"/templates/article"}).state("about",{url:"/about",templateUrl:"/templates/about"}).state("category",{url:"/topic/:category",templateUrl:"/templates/topic/topic-category"}).state("edit-article",{url:"/edit-article",templateUrl:"/templates/edit-article"})}]),e.run(["$rootScope","$state","dialogService",function(){}])}(angular);
!function(n){"use strict";var t=n.module("authentication",[]);window.authentication=window.authentication||{tokenKey:"authentication.key.edu.online",authRequire:"",authSuccess:"",loginSuccess:"",loginFailed:""},t.provider("tokenAuth",function(){this.$get=["$injector","$q",function(){function n(){}var t;return window.localStorage&&(t=window.localStorage),{checkTokenAuth:n}}]}),t.factory("tokenAuthHttpInterceptor",["$rootScope","$q","tokenAuth",function(n,t,e){var o={request:function(n){return n},response:function(n){return n},requestError:function(n){return n},responseError:function(n){return n}};return o}]),t.config(function(){})}(angular);
!function(r){"use strict";r.module("platform").factory("dialogService",["$modal","$templateCache",function(t){return{show:function(e){var o={};r.copy(e,o);var a=t.open(o);return a.result}}}])}(angular);
!function(e){"use strict";e.module("ngWeb").directive("articleItem",["$templateCache","$state",function(e,t){return{restrict:"EA",scope:{item:"="},template:e.get("article-item.html"),link:function(e){e.item.href=t.href("article",{id:e.item._id})}}}])}(angular);
!function(t){"use strict";t.module("ngWeb").directive("layoutHeader",["$templateCache","dialogService",function(t,e){return{restrict:"EA",scope:{},template:t.get("layout-header.html"),controller:function(r){r.login=function(){e.show({template:t.get("login-template.html")})}}}}]).directive("layoutFooter",["$templateCache",function(t){return{restrict:"EA",template:t.get("layout-footer.html")}}]).directive("layoutSidebar",["$templateCache","$state","topicItemSource",function(t,e,r){return{restrict:"EA",template:t.get("layout-sidebar.html"),link:function(t){_.forEach(r,function(t){t.href=e.href("category",{category:t.uiSref})}),t.layoutSidebarItemSource=r}}}]).directive("layoutContent",["$templateCache",function(t){return{restrict:"EA",template:t.get("layout-content.html")}}]).directive("layoutSearch",["$templateCache",function(t){return{restrict:"EA",template:t.get("layout-search.html")}}])}(angular);
!function(t){"use strict";t.module("ngWeb").directive("topicCategory",["$templateCache",function(t){return{restrict:"EA",scope:{itemSource:"="},template:t.get("topic-category.html"),link:function(){}}}])}(angular);
!function(t){"use strict";t.module("ngWeb").directive("topicItems",["$templateCache","topicItemSource","$state",function(t,e,c){return{restrict:"EA",template:t.get("topic-items.html"),link:function(t){_.forEach(e,function(t){t.href=c.href("category",{category:t.uiSref})}),t.itemSource=e}}}])}(angular);
!function(t){"use strict";t.module("ngWeb").controller("editArticleController",["$scope","$http","topicItemSource",function(t,e,n){t.category=n,t.content="",t.title="",t.submit=function(){e({method:"post",url:"/api/saveArticle",data:{category:"javascript",title:t.title,content:t.content}}).then(function(){})}}])}(angular);
!function(n){"use strict";n.module("ngWeb").controller("mainframeController",["$scope",function(){}])}(angular);
!function(t){"use strict";t.module("ngWeb").controller("topicCategoryController",["$scope","$http","$state",function(t,o,e){o.get("/api/topics/"+e.params.category).then(function(o){200===o.status&&(t.itemSource=o.data)})}])}(angular);
!function(t){"use strict";t.module("ngWeb").controller("topicController",["$scope","$http","topicItemSource",function(t,o,n){t.data=n,o.get("/api/topics/grouptopics").then(function(o){if(200===o.status){{t.data}_.forEach(o.data,function(o){var n=_.find(t.data,function(t){return o.topic===t._id});n.number=o.count})}})}])}(angular);
//# sourceMappingURL=data:application/json;base64,